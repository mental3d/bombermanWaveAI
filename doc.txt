Bomberman codenjoy — как играть?

Опубликовано 20.09.2013 автором apofig
В принципе, игровой сервер доступен сейчас в целях ознакомления. http://codenjoy.com/codenjoy-contest/

В чем суть игры?

Надо написать своего бота бомбермена, который обыграет других ботов по очкам. Вся игра при этом проходит на одном поле. Можно подкарауливать других игроков, можно взрывать самого себя, можно напороться на чертика а можно попробовать его взорвать.

Бомбермен может передвигаться по свободным ячейкам во все четыре стороны. Так же бомбермен может поставить бомбу, которая взорвется спустя 5 секунд после. Все, кто попадает в зону поражения бомбы — умирают (в т.ч. и сам автор бомбы). За убийство врагов (как чертиков так и других бомберменов) бомбермену начисляются очки. За смерть бомбермена (от своей или чужой бомбы, либо от чертика) начисляются штрафные очки. Очки суммируются и побеждает игрок с большим числом очков к концу игры (до условленного времени). Мертвый бомбермен тут же появляется в random месте на поле.

Вот отчет одной из прошлых встреч - можно посмотреть как это происходит в действии.

Итак ты регистрируешься на сервере указывая свой userName

Далее тебе необходимо подключиться из кода к серверу через вебсокеты
Вот адрес для подключения к игре на сервере http://codenjoy.com

ws://tetrisj.jvmhost.net:12270/codenjoy-contest/ws?user=userName
Если сервер размещен в той же сети, что и твой компьютер (спросить у организатора), то адрес будет несколько иным (тут xxx.xxx.xxx.xxx — IP сервера в локальной сети)

ws://xxx.xxx.xxx.xxx:8080/codenjoy-contest/ws?user=userName
Если сервер размещен локально (скачать его можно тут, для его работы понадобится установленная JDK1.7 и Maven3)

ws://127.0.0.1:8080/codenjoy-contest/ws?user=userName
После этого ты будешь регулярно (каждую секунду) получать строку символов — с закодированным состоянием доски. Формат таков

^board=(.*)$
с помощью этого regexp можно выкусить строку доски. Вот пример

board=☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼ #   # #  #♥#  #  #  &        #☼☼♥☼♥☼♥☼#☼ ☼ ☼ ☼ ☼♥☼ ☼ ☼#☼#☼♥☼#☼#☼☼#♥♥  ♥#   # #♥   # ♥#          ☼☼ ☼ ☼#☼ ☼♥☼ ☼ ☼#☼ ☼ ☼ ☼ ☼&☼ ☼ ☼ ☼☼     ♥          # #            ☼☼ ☼ ☼ ☼ ☼♥☼ ☼ ☼♥☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼☼#       # #       ☺& 2  #  #  #☼☼#☼♥☼ ☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼ ☼ ☼☼#  # ♥#               # ♥   #  ☼☼ ☼ ☼#☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼☼   #♥ #      #                 ☼☼ ☼ ☼ ☼ ☼♥☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼☼     ## #     #   # #   ♥      ☼☼ ☼ ☼♥☼ ☼ ☼#☼ ☼#☼ ☼ ☼♥☼ ☼ ☼ ☼ ☼ ☼☼       #♥       #      ## # ###☼☼ ☼ ☼ ☼#☼ ☼ ☼#☼ ☼ ☼#☼#☼&☼ ☼ ☼ ☼ ☼☼       #       #    ♣# #     ♥ ☼☼ ☼ ☼ ☼♥☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼☼        ## ## ♥             # #☼☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼☼                   &    ###  ##☼☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼☼                   ♥ ##        ☼☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼♥☼#☼ ☼ ☼ ☼☼     ##         &#         #   ☼☼ ☼ ☼ ☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼ ☼ ☼ ☼☼   #   #         #     # &     ☼☼♥☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼#☼ ☼☼  #                    ##   &  ☼☼ ☼ ☼ ☼ ☼ ☼#☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼#☼ ☼☼ #    # &        #       #     ☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼
Длинна строки равна площади поля. Если вставить символ переноса строки каждые sqrt(length(string)) символов, то получится изображение поля.

☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼
☼ #   # #  #♥#  #  #  &        #☼
☼♥☼♥☼♥☼#☼ ☼ ☼ ☼ ☼♥☼ ☼ ☼#☼#☼♥☼#☼#☼
☼#♥♥  ♥#   # #♥   # ♥#          ☼
☼ ☼ ☼#☼ ☼♥☼ ☼ ☼#☼ ☼ ☼ ☼ ☼&☼ ☼ ☼ ☼
☼     ♥          # #            ☼
☼ ☼ ☼ ☼ ☼♥☼ ☼ ☼♥☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼
☼#       # #       ☺& 2  #  #  #☼
☼#☼♥☼ ☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼ ☼ ☼
☼#  # ♥#               # ♥   #  ☼
☼ ☼ ☼#☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼
☼   #♥ #      #                 ☼
☼ ☼ ☼ ☼ ☼♥☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼
☼     ## #     #   # #   ♥      ☼
☼ ☼ ☼♥☼ ☼ ☼#☼ ☼#☼ ☼ ☼♥☼ ☼ ☼ ☼ ☼ ☼
☼       #♥       #      ## # ###☼
☼ ☼ ☼ ☼#☼ ☼ ☼#☼ ☼ ☼#☼#☼&☼ ☼ ☼ ☼ ☼
☼       #       #    ♣# #     ♥ ☼
☼ ☼ ☼ ☼♥☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼
☼        ## ## ♥             # #☼
☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼
☼                   &    ###  ##☼
☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼
☼                   ♥ ##        ☼
☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼♥☼#☼ ☼ ☼ ☼
☼     ##         &#         #   ☼
☼ ☼ ☼ ☼#☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼ ☼ ☼ ☼
☼   #   #         #     # &     ☼
☼♥☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼ ☼#☼#☼ ☼
☼  #                    ##   &  ☼
☼ ☼ ☼ ☼ ☼ ☼#☼ ☼ ☼ ☼ ☼ ☼ ☼#☼ ☼#☼ ☼
☼ #    # &        #       #     ☼
☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼☼
Первый символ строки соответствует ячейке расположенной в левом верхнем углу и имеет координату [0, 0]. В этом примере — позиция бомбермена (символ ☺) — [19,7].

Расшифровка символов на рисунке ниже

public enum Element {

    /// This is your Bomberman
    BOMBERMAN('☺'),             // this is what he usually looks like
    BOMB_BOMBERMAN('☻'),        // this is if he is sitting on own bomb
    DEAD_BOMBERMAN('Ѡ'),        // oops, your Bomberman is dead (don't worry, he will appear somewhere in next move)
                                // you're getting -200 for each death

    /// this is other players Bombermans
    OTHER_BOMBERMAN('♥'),       // this is what other Bombermans looks like
    OTHER_BOMB_BOMBERMAN('♠'),  // this is if player just set the bomb
    OTHER_DEAD_BOMBERMAN('♣'),  // enemy corpse (it will disappear shortly, right on the next move)
                                // if you've done it you'll get +1000

    /// the bombs
    BOMB_TIMER_5('5'),          // after bomberman set the bomb, the timer starts (5 tacts)
    BOMB_TIMER_4('4'),          // this will blow up after 4 tacts
    BOMB_TIMER_3('3'),          // this after 3
    BOMB_TIMER_2('2'),          // two
    BOMB_TIMER_1('1'),          // one
    BOOM('҉'),                  // Boom! this is what is bomb does, everything that is destroyable got destroyed

    /// walls
    WALL('☼'),                  // indestructible wall - it will not fall from bomb
    DESTROY_WALL('#'),          // this wall could be blowed up
    DESTROYED_WALL('H'),        // this is how broken wall looks like, it will dissapear on next move
                                // if it's you did it - you'll get +10 points.

    /// meatchoppers
    MEAT_CHOPPER('&'),          // this guys runs over the board randomly and gets in the way all the time
                                // if it will touch bomberman - it will die
                                // you'd better kill this piece of ... meat, you'll get +100 point for it
    DEAD_MEAT_CHOPPER('x'),     // this is chopper corpse

    /// a void
    SPACE(' ');                 // this is the only place where you can move your Bomberman
В ответ на это ты должен отправить одну из команд left, right, up, down или act (что значит поставить бомбу). Команды управления движением можно комбинировать с командой act через запятую.

Игра пошаговая — каждую секунду ты будешь получать состояние обновленной доски и за следующую секунду должны успеть дать ответ, куда пойти твоему бомбермену. Если не успел — бомбермен остается на месте.

Сейчас реализованы клиенты для игры для некоторых языков программирования (java, javascript, objective-c, c++, python, c#) Другие языки в процессе написания (спасибо игрокам-активистам!).

Слишком много форы клиентский код не дает играющим, поскольку в этом коде еще надо разобраться, но там реализована логика общения с сервером + некоторое высокоуровневое апи для работы с доской (что уже приятно)

Point getBomberman() — позиция моего бомбера на доске
Collection<Point> getOtherBombermans() — позиции всех остальных бомберов (противников) на доске
boolean isMyBombermanDead() — жив ли мой бомбер
boolean isAt(int x, int y, Element element) — находится ли в позиции  x, y заданный элемент?
boolean isAt(int x, int y, Collection<Element> elements) — находится ли в позиции  x, y что-нибудь из заданного набора
boolean isNear(int x, int y, Element element) — есть ли вокруг клеточки с координатой x,y заданный элемент
boolean isBarrierAt(int x, int y) — есть ли препятствие в клеточке x, y
int countNear(int x, int y, Element element) — сколько элементов заданного типа есть вокруг клетки с x, y
Element getAt(int x, int y) — возвращает элемент в текущей клетке
int boardSize() — возвращает размер доски
Collection<Point> getBarriers() — координаты всех объектов препятствующих движению
Collection<Point> getMeatChoppers() — координаты всех чудиков которые могут убить бомбера
Collection<Point> getWalls() — координаты всех бетонных стен
Collection<Point> getDestroyWalls() — координаты всех кирпичных стен (их можно разрушать)
Collection<Point> getBombs() — координаты всех бомб
Collection<Point> getFutureBlasts() — координаты потенциально опасных мест, где бомба может разорваться. (бомба взрывается на N {решим перед началом игры} клеточек в стороны: вверх, вниз, вправо, влево)

Тут:
Point  - координата x, y
Collection — набор нескольких объектов
Element — тип элемента на доске, описание их смотри вот тут

Эти все методы тянут информацию из строкового параметра board, пришедшего от сервера.

Для тех, кому повезло — ссылка на клиенты (собранные в zip архив) находится вот тут http://codenjoy.com/codenjoy-contest/help

Еще информация (может пригодится).

По возникающим вопросам, обращайтесь ко мне в skype: alexander.baglay